{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACMC,EAAaC,SAASC,cAAc,SACpCC,EAAgBF,SAASC,cAAc,UACvCE,EAAM,GA8BZ,SAASC,EAAcC,EAAUC,EAAOC,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,GACFF,EAAQ,CAAEJ,WAAUC,QAAOC,SAE7BG,EAAO,CAAEL,WAAUC,QAAOC,Q,GACzBD,GAASD,EAAW,GAAKE,E,IApChCR,EAAWgB,iBAAiB,SAC5B,SAAkBC,GAChBb,EAAIa,EAAMC,OAAOC,MAAQF,EAAMC,OAAOE,K,IAExCjB,EAAca,iBAAiB,SAE/B,SAAqBC,GACnBA,EAAMI,iBACN,IAAK,IAAIC,EAAI,EAAGA,GAAKlB,EAAImB,OAAQD,IAC3BA,GAAKlB,EAAImB,QACXlB,EAAciB,EAAGE,OAAOpB,EAAIG,OAAQiB,OAAOpB,EAAII,OAC5CiB,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAAOC,EAAIkB,EAAJlB,KACxBmB,EAAA7B,GAAS8B,OAAOC,QACd,uBACIC,OADqBxB,EAAS,QAEjCwB,OADCvB,GAASD,EAAW,GAAKE,EAC1B,M,IAGJuB,OAAM,SAAAL,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAAOC,EAAIkB,EAAJlB,KACzBmB,EAAA7B,GAAS8B,OAAOI,QACd,sBACEF,OADoBxB,EAAS,QAE9BwB,OADCvB,GAASD,EAAW,GAAKE,EAC1B,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst delayInput = document.querySelector('.form');\nconst promiseButton = document.querySelector('button');\nconst obj = {};\n\ndelayInput.addEventListener('input', inputObj);\nfunction inputObj(event) {\n  obj[event.target.name] = event.target.value;\n}\npromiseButton.addEventListener('click', formHandler);\n\nfunction formHandler(event) {\n  event.preventDefault();\n  for (let i = 1; i <= obj.amount; i++) {\n    if (i <= obj.amount) {\n      createPromise(i, Number(obj.delay), Number(obj.step))\n        .then(({ position, delay, step }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${\n              delay + (position - 1) * step\n            }ms`\n          );\n        })\n        .catch(({ position, delay, step }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${\n              delay + (position - 1) * step\n            }ms`\n          );\n        });\n    }\n  }\n}\nfunction createPromise(position, delay, step) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay, step });\n      }\n      reject({ position, delay, step });\n    }, delay + (position - 1) * step);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$delayInput","document","querySelector","$ce04d3a99e08e73b$var$promiseButton","$ce04d3a99e08e73b$var$obj","$ce04d3a99e08e73b$var$createPromise","position","delay","step","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","target","name","value","preventDefault","i","amount","Number","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.6b26864b.js.map"}